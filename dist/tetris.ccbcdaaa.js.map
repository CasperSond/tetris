{"version":3,"sources":["src/js/createPlayingField.js","src/js/helpers.js","src/js/tetrominoes.js","src/js/rotate.js","src/js/getCurrentPositionOfTetromino.js","src/js/upDateScene.js","src/js/eventHandlers.js","src/js/main.js","index.js"],"names":["field","document","getElementById","i","rowElement","createElement","appendChild","j","columnElement","random","from","to","range","Math","floor","rotatedTetro","matrix","rotateNumber","len","length","layers","rotated","center","push","layer","getLayer","insertLayer","shiftArray","n","items","endItem","arr","shift","copy","slice","removed","splice","concat","layerLength","middle","max","bottomLayerStart","unshift","reverse","getCurrentPositionOfTetromino","liveTetromino","tetromino","allTetrominoes","type","rotationState","reduce","acc","rowArray","yOffSetIndex","columnElements","accColumns","el","xOffSetIndex","translatedPosition","topLeftRef","gameState","running","level","nextTick","mainState","Array","fill","liveTetrominoState","position","startGame","dropNewTetromino","clockState","rotateTetromino","ref","oldPosition","offset","needToOffSet","map","x","y","isColliding","renderTetrominoMove","performance","now","moveTetromino","difX","difY","legit","reachedBottom","collision","newPosition","xPos","yPos","newCoor","addToState","filled","checkFilledRows","console","log","forEach","removeAndRow","xRef","yRef","positions","highest","lowest","min","accessPosInDom","children","item","style","background","newPos","removeOld","pauseGame","index","remove","row","prepend","every","requestAnimationFrame","initEventHandlers","addEventListener","e","indexOf","which","move","start","pause"],"mappings":"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","file":"tetris.ccbcdaaa.js","sourceRoot":"..","sourcesContent":["export default () => {\n  const field = document.getElementById(\"field\");\n\n  for (let i = 0; i < 20; i++) {\n    const rowElement = document.createElement(\"div\");\n    field.appendChild(rowElement);\n\n    for (let j = 0; j < 10; j++) {\n      const columnElement = document.createElement(\"div\");\n      rowElement.appendChild(columnElement);\n    }\n  }\n};\n","export function random(from, to) {\n  const range = Math.floor(Math.random() * (to - from + 1));\n  return range + from;\n}\n","export default [\n  [\n    [null, null, null, null],\n    [true, true, true, true],\n    [null, null, null, null],\n    [null, null, null, null]\n  ],\n  [\n    [true, false, false],\n    [true, true, true],\n    [false, false, false]\n  ],\n  [\n    [false, false, true],\n    [true, true, true],\n    [false, false, false]\n  ],\n  [\n    [false, true, true, false],\n    [false, true, true, false],\n    [false, false, false, false],\n    [false, false, false, false]\n  ],\n  [\n    [false, true, true],\n    [true, true, false],\n    [false, false, false]\n  ],\n  [\n    [true, true, false],\n    [false, true, true],\n    [false, false, false]\n  ],\n  [\n    [false, true, false],\n    [true, true, true],\n    [false, false, false]\n  ]\n];\n","export function rotatedTetro(matrix, rotateNumber = 0) {\n  if (rotateNumber === 0) return matrix;\n\n  rotateNumber = rotateNumber % 4;\n\n  const len = matrix.length;\n  const layers = Math.floor(len / 2);\n  const rotated = [];\n\n  if (len % 2 === 1) {\n    const center = matrix[layers][layers];\n    rotated.push([center]);\n  }\n\n  for (let i = layers - 1; i >= 0; i--) {\n    const layer = getLayer(matrix, i);\n    const layerLen = layer.length;\n    const layerLength = layerLen / 4 + 1;\n    const shift = layerLength - 1;\n    const shiftedArray = shiftArray(layer, shift * rotateNumber);\n\n    insertLayer(shiftedArray, rotated);\n  }\n\n  return rotated;\n}\n\nfunction getLayer(matrix, n) {\n  const len = matrix.length;\n  const items = len - n * 2;\n  const endItem = n + items - 1;\n  const arr = [];\n  for (let i = n; i < items + n; i++) {\n    arr.push(matrix[n][i]);\n  }\n\n  for (let i = n + 1; i <= endItem; i++) {\n    arr.push(matrix[i][endItem]);\n  }\n\n  for (let i = endItem - 1; i > n; i--) {\n    arr.push(matrix[endItem][i]);\n  }\n\n  for (let i = endItem; i > n; i--) {\n    arr.push(matrix[i][n]);\n  }\n\n  return arr;\n}\n\nfunction shiftArray(arr, shift) {\n  const copy = arr.slice();\n\n  const n = shift >= 0 ? copy.length - shift : shift * -1;\n  const removed = copy.splice(0, n);\n\n  return copy.concat(removed);\n}\n\nfunction insertLayer(layer, matrix) {\n  const len = layer.length;\n  const layerLength = len / 4 + 1;\n  const middle = Math.max(0, layerLength - 2);\n  const bottomLayerStart = layerLength + middle;\n\n  matrix.unshift(layer.slice(0, layerLength));\n  matrix.push(\n    layer.slice(bottomLayerStart, bottomLayerStart + layerLength).reverse()\n  );\n\n  for (let i = 0; i < middle; i++) {\n    matrix[i + 1].push(layer[layerLength + i]);\n    matrix[i + 1].unshift(layer[len - (i + 1)]);\n  }\n}\n","import allTetrominoes from \"./tetrominoes\";\nimport { rotatedTetro } from \"./rotate\";\n\nexport function getCurrentPositionOfTetromino(liveTetromino) {\n  const tetromino = allTetrominoes[liveTetromino.type];\n  const rotated = rotatedTetro(tetromino, liveTetromino.rotationState);\n\n  return rotated.reduce((acc, rowArray, yOffSetIndex) => {\n    const columnElements = rowArray.reduce((accColumns, el, xOffSetIndex) => {\n      if (el === true) {\n        const translatedPosition = [\n          liveTetromino.topLeftRef[0] + xOffSetIndex,\n          liveTetromino.topLeftRef[1] + yOffSetIndex\n        ];\n        accColumns.push(translatedPosition);\n      }\n      return accColumns;\n    }, []);\n\n    return acc.concat(columnElements);\n  }, []);\n}\n","import { random } from \"./helpers\";\nimport { getCurrentPositionOfTetromino } from \"./getCurrentPositionOfTetromino\";\nimport { rotatedTetro } from \"./rotate\";\nimport tetrominoesForm from \"./tetrominoes\";\n\nconst gameState = {\n  running: false,\n  level: 3,\n  nextTick: 0\n};\n\nexport const mainState = [];\n\n(function mainStateInit() {\n  for (let i = 0; i < 20; i++) {\n    mainState.push(new Array(10).fill(null));\n  }\n})();\n\nexport const liveTetrominoState = {\n  topLeftRef: [0, 0],\n  rotationState: 0,\n  position: [],\n  type: 0\n};\n\nexport function startGame() {\n  gameState.running = true;\n  dropNewTetromino();\n  clockState();\n}\n\nexport function rotateTetromino() {\n  const ref = liveTetrominoState.topLeftRef;\n  const oldPosition = liveTetrominoState.position.slice();\n  let position = getCurrentPositionOfTetromino({\n    ...liveTetrominoState,\n    ...{ rotationState: (liveTetrominoState.rotationState + 1) % 4 }\n  });\n\n  // if outside try move in\n  // check collision (and then try to move it + or - 1 - 2 ... offset it ... )\n\n  const offset = needToOffSet(position);\n\n  if (offset !== 0) {\n    position = position.map(([x, y]) => {\n      return [x + offset, y];\n    });\n  }\n\n  const colliding = isColliding(position);\n\n  if (!colliding) {\n    liveTetrominoState.rotationState = ++liveTetrominoState.rotationState;\n    liveTetrominoState.position = position;\n    gameState.nextTick += 200;\n\n    renderTetrominoMove(position, oldPosition);\n  }\n}\n\nexport function dropNewTetromino() {\n  gameState.nextTick = performance.now() + 1000 / gameState.level;\n  gameState.running = true;\n\n  liveTetrominoState.type = random(0, 6);\n  liveTetrominoState.topLeftRef = [3, 0];\n  liveTetrominoState.rotationState = 0;\n  liveTetrominoState.position = getCurrentPositionOfTetromino(\n    liveTetrominoState\n  );\n\n  renderTetrominoMove(liveTetrominoState.position);\n}\n\nexport function moveTetromino([difX, difY]) {\n  let legit = true;\n  let reachedBottom = false;\n  let collision = false;\n\n  const newPosition = liveTetrominoState.position.map(([xPos, yPos]) => {\n    const newCoor = [xPos + difX, yPos + difY];\n\n    if (newCoor[0] < 0 || newCoor[0] > 9) {\n      // tetromino at edge attempting to move outside\n      legit = false;\n    } else {\n      // a legit move\n      if (newCoor[1] < 20 && mainState[newCoor[1]][newCoor[0]] !== null) {\n        // collision happens\n\n        if (difY !== 0) {\n          // move down\n\n          collision = true;\n        } else {\n          // move left or right\n          legit = false;\n        }\n      }\n    }\n    if (newCoor[1] > 19) {\n      legit = false;\n      reachedBottom = true;\n    }\n\n    return newCoor;\n  });\n\n  if (reachedBottom || collision) {\n    addToState(liveTetrominoState);\n    const filled = checkFilledRows();\n    console.log(filled);\n\n    if (filled.length > 0) {\n      filled.forEach(el => {\n        mainState.splice(el, 1);\n        mainState.unshift(new Array(10).fill(null));\n\n        removeAndRow(el);\n      });\n    }\n\n    dropNewTetromino();\n  }\n\n  if (legit && !collision) {\n    const oldPosition = liveTetrominoState.position.slice();\n    liveTetrominoState.position = newPosition;\n\n    const [xRef, yRef] = liveTetrominoState.topLeftRef;\n    liveTetrominoState.topLeftRef = [xRef + difX, yRef + difY];\n    renderTetrominoMove(newPosition, oldPosition);\n\n    if (difX !== 0) {\n      gameState.nextTick += 50;\n    }\n  }\n}\n\nconst field = document.getElementById(\"field\");\n\nfunction needToOffSet(positions) {\n  const highest = positions.reduce((acc, [x, y]) => {\n    return Math.max(x, acc);\n  }, 0);\n\n  if (highest > 9) return 9 - highest;\n\n  const lowest = positions.reduce((acc, [x, y]) => {\n    return Math.min(x, acc);\n  }, 10);\n\n  if (lowest < 0) return lowest * -1;\n\n  return 0;\n}\n\nfunction accessPosInDom([x, y], type) {\n  const row = field.children.item(y);\n  const el = row.children.item(x);\n\n  if (type === -1) {\n    el.style.background = \"black\";\n  } else {\n    const colors = [\n      \"rgb(97,197,235)\",\n      \"rgb(91, 102, 168)\",\n      \"rgb(225, 127, 58)\",\n      \"rgb(242, 211, 73)\",\n      \"rgb(101, 179, 82)\",\n      \"rgb(221, 58, 53)\",\n      \"rgb(161, 84, 153)\"\n    ];\n    el.style.background = colors[liveTetrominoState.type];\n  }\n}\n\nfunction renderTetrominoMove(newPos, removeOld) {\n  if (removeOld) {\n    removeOld.forEach(el => {\n      accessPosInDom(el, -1);\n    });\n  }\n  newPos.forEach(el => {\n    accessPosInDom(el, liveTetrominoState.type);\n  });\n}\n\nexport function pauseGame() {\n  // set time to next tick\n  gameState.running = !gameState.running;\n\n  if (gameState.running) {\n    clockState();\n  }\n}\n\nfunction removeAndRow(index) {\n  const row = field.children.item(index).remove();\n  const rowElement = document.createElement(\"div\");\n\n  for (let j = 0; j < 10; j++) {\n    const columnElement = document.createElement(\"div\");\n    rowElement.appendChild(columnElement);\n  }\n  field.prepend(rowElement);\n}\n\nfunction addToState({ position, type }) {\n  position.forEach(([x, y]) => {\n    mainState[y][x] = type;\n  });\n}\n\nfunction isColliding(positions) {\n  return positions.every(([x, y]) => {\n    return mainState[y][x];\n  });\n}\n\nfunction checkFilledRows() {\n  return mainState.reduce((acc, row, index) => {\n    const rowFull = row.every(el => {\n      return el !== null;\n    });\n\n    if (rowFull) {\n      acc.push(index);\n    }\n\n    return acc;\n  }, []);\n}\n\nfunction clockState() {\n  if (performance.now() >= gameState.nextTick) {\n    moveTetromino([0, 1]);\n    gameState.nextTick = performance.now() + 1000 / gameState.level;\n  }\n\n  if (gameState.running) {\n    requestAnimationFrame(clockState);\n  }\n}\n","import {\n  startGame,\n  pauseGame,\n  moveTetromino,\n  rotateTetromino\n} from \"./upDateScene\";\n\nexport function initEventHandlers() {\n  document.addEventListener(\"keydown\", e => {\n    if ([37, 39].indexOf(e.which) > -1) {\n      const move = e.which === 37 ? [-1, 0] : [1, 0];\n      moveTetromino(move);\n    } else if (e.which === 38) {\n      rotateTetromino();\n    } else if (e.which === 40) {\n      moveTetromino([0, 1]);\n    }\n  });\n\n  const start = document.getElementById(\"startGame\");\n  const pause = document.getElementById(\"pauseGame\");\n\n  start.addEventListener(\"click\", startGame);\n  pause.addEventListener(\"click\", pauseGame);\n}\n","import createPlayingField from \"./createPlayingField\";\nimport { initEventHandlers } from \"./eventHandlers\";\n\ncreatePlayingField();\ninitEventHandlers();\n","import main from \"./src/js/main\";\nimport \"./src/css/index.css\";\n"]}